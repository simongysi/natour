#!/usr/bin/env ruby

require 'clamp'
require 'natour'
require 'pathname'
require 'word_wrap'

class NatourCmd < Clamp::Command
  class ReportCmd < Clamp::Command
    class CreateCmd < Clamp::Command
      banner(WordWrap.ww(
        'Create reports in AsciiDoc format from a directory. GPS tracks, images and species ' \
        'lists (Kosmos Vogelführer, Vogelführer Birdlife Schweiz, ornitho.ch, Flora Helvetica, ' \
        'Info Flora Online-Feldbuch) are included. Images of the map section covered by the GPS ' \
        'tracks are also created and included.'
      ))
      option(%w[-d --out-dir], 'DIR', 'Output directory')
      option(%w[-f --out-file], 'FILE', 'Output filename')
      option(%W[--\[no-\]overwrite], :flag, 'Overwrite existing files')
      option(%w[--track-formats], 'FORMATS', 'GPS track formats (gpx, fit)') { |s| s.split(',').map(&:to_sym) }
      option(%W[--\[no-\]map], :flag, 'Create map images')
      option(%w[--map-layers], 'LAYERS', 'Add additional layers to map images') { |s| s.split(',') }
      option(%w[--adoc-author], 'AUTHOR', 'AsciiDoc author (name <email>[; name2 <email2>...])')
      parameter('PATH', 'Path to directory')

      def execute
        config = context[:config][:report][:create]
        Natour.create_reports(
          path.encode('utf-8').delete_suffix('"').gsub('\\', '/'),
          out_dir: out_dir || config[:out_dir],
          out_file: out_file || config[:out_file],
          overwrite: Natour::BooleanUtils.to_boolean(overwrite?, default_value: config[:overwrite]),
          track_formats: track_formats || config[:track_formats],
          create_map: Natour::BooleanUtils.to_boolean(map?, default_value: config[:map]),
          map_layers: map_layers || config[:map_layers],
          adoc_author: adoc_author || config[:adoc_author]
        )
      rescue Errno::EEXIST, Errno::ENOENT, Errno::EACCES, Errno::EISDIR, Errno::EINVAL => e
        message, _, path = Natour::ErrnoUtils.split_message(e)
        abort("ERROR: #{message} '#{path}'")
      end
    end

    class ConvertCmd < Clamp::Command
      banner(WordWrap.ww(
        'Convert a report from AsciiDoc to PDF or HTML (or any other supported format).'
      ))
      option(%w[-d --out-dir], 'DIR', 'Output directory')
      option(%w[-f --out-file], 'FILE', 'Output filename')
      option(%W[--\[no-\]overwrite], :flag, 'Overwrite existing files')
      option(%w[-b --backend], 'BACKEND', 'Conversion backend (pdf, html5 ...)', &:to_sym)
      option(%W[--\[no-\]draft], :flag, 'Show additional information (e.g. image paths)')
      option(%w[--draft-backend], 'BACKEND', 'Preferred conversion backend for draft (pdf, html5 ...)', &:to_sym)
      option(%w[--image-maxdim], 'DIM', 'Shrink oversized images (PDF only)') { |s| Integer(s) }
      parameter('PATH', 'Path to AsciiDoc file')

      def execute
        config = context[:config][:report][:convert]
        Natour.convert_report(
          path.encode('utf-8').delete_suffix('"').gsub('\\', '/'),
          out_dir: out_dir || config[:out_dir],
          out_file: out_file || config[:out_file],
          overwrite: Natour::BooleanUtils.to_boolean(overwrite?, default_value: config[:overwrite]),
          backend: backend || config[:backend],
          draft: Natour::BooleanUtils.to_boolean(draft?, default_value: config[:draft]),
          draft_backend: draft_backend || config[:draft_backend],
          image_maxdim: image_maxdim || config[:image_maxdim]
        )
      rescue Errno::EEXIST, Errno::ENOENT, Errno::EACCES, Errno::EISDIR, Errno::EINVAL => e
        message, _, path = Natour::ErrnoUtils.split_message(e)
        abort("ERROR: #{message} '#{path}'")
      end
    end

    subcommand('create', 'Create AsciiDoc reports from directory', CreateCmd)
    subcommand('convert', 'Convert AsciiDoc report to PDF or HTML', ConvertCmd)
  end

  class MapCmd < Clamp::Command
    class CreateCmd < Clamp::Command
      banner(WordWrap.ww(
        'Create images of the map section covered by the GPS files. The GPS files must be in GPX' \
        ' or KML format and contain tracks, waypoints or routes. The images are saved in JPG or ' \
        'PNG format.'
      ))
      option(%w[-d --out-dir], 'DIR', 'Output directory')
      option(%w[-f --out-file], 'FILE', 'Output filename')
      option(%W[--\[no-\]overwrite], :flag, 'Overwrite existing files')
      option(%w[--gps-colors], 'COLORS', 'Colors for elements from GPS files') { |s| s.split(',') }
      option(%w[--map-layers], 'LAYERS', 'Add additional layers to map images') { |s| s.split(',') }
      option(%w[--image-size], 'WIDTH,HEIGHT', 'Image size') do |s|
        s.split(',', 2).map { |v| Integer(v) }
      end
      parameter('PATH ...', 'Paths to GPS files', attribute_name: :paths)

      def execute
        config = context[:config][:map][:create]
        Natour::MapGeoAdmin.open do |map|
          filename = Pathname(out_dir || config[:out_dir] || Pathname(paths.first).dirname)
                     .join(out_file || config[:out_file] || Pathname(paths.first).basename.sub_ext('.jpg'))
          map.save_image(
            filename,
            overwrite: Natour::BooleanUtils.to_boolean(overwrite?, default_value: config[:overwrite]),
            gps_files: paths,
            gps_colors: gps_colors || config[:gps_colors],
            map_layers: map_layers || config[:map_layers],
            image_size: image_size || config[:image_size]
          )
        end
      rescue Errno::EEXIST, Errno::ENOENT, Errno::EACCES, Errno::EISDIR, Errno::EINVAL => e
        message, _, path = Natour::ErrnoUtils.split_message(e)
        abort("ERROR: #{message} '#{path}'")
      end
    end

    subcommand('create', 'Create map images from GPS files', CreateCmd)
  end

  subcommand('report', 'Create or convert reports', ReportCmd)
  subcommand('map', 'Create map images', MapCmd)

  option(%w[-v --version], :flag, 'Display the version') do
    $stdout.puts("#{invocation_path} #{Natour::VERSION}")
    exit
  end
end

config = Natour::Config.load_file(
  '.natour.yml',
  default: {
    report: {
      create: {
        out_dir: nil,
        out_file: nil,
        overwrite: false,
        track_formats: %i[gpx fit],
        map: true,
        map_layers: [],
        adoc_author: nil
      },
      convert: {
        out_dir: nil,
        out_file: nil,
        overwrite: false,
        backend: :pdf,
        draft: false,
        draft_backend: nil,
        image_maxdim: 1800
      }
    },
    map: {
      create: {
        out_dir: nil,
        out_file: nil,
        overwrite: false,
        gps_colors: [],
        map_layers: [],
        image_size: [1200, 900]
      }
    }
  }
)

NatourCmd.run(
  Pathname($PROGRAM_NAME).basename,
  ARGV,
  { config: config }
)
